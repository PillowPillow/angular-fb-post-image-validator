var paths = {};

var Path = require('path');

paths.base = Path.normalize(__dirname);

function Grunt(grunt) {
	var tasks = [
		'grunt-babel',
		'grunt-add-comment',
		'grunt-html2js',
		'grunt-contrib-concat',
		'grunt-contrib-cssmin',
		'grunt-contrib-uglify'
	];

	for (var i = 0; i < tasks.length; i++)
		grunt.loadNpmTasks(tasks[i]);

	require('time-grunt')(grunt);

	var pathOption = getPathOption(grunt);

	var Configuration = {};
	Configuration.package = grunt.file.readJSON('package.json');

	Configuration.babel = {
		options: {
			sourceMap: false
		},
		all: {
			files: [{
				expand: true,
				cwd: paths.base,
				ext: '.js',
				src: (pathOption ? pathOption.name : ['**/*.es6']),
				dest: paths.base
			}]
		}
	};

	Configuration.add_comment = {
		common: {
			options: {
				comments: ['Autogenerated, do not edit. All changes will be undone.'],
				prepend: true,
				syntaxes: {
					'.js': '//'
				}
			},
			files: [{
				expand: true,
				src: (pathOption ? [pathOption.name.replace('.es6', '.js')] : ['lib/**/*.js']),
			}]
		},
		dist: {
			options: {
				comments: [
				'<%= package.name %>',
				'version: <%= package.version %>',
				'author: <%= package.author %>',
				'generated: ' + new Date(), 
				'Autogenerated, do not edit. All changes will be undone.'], 
				prepend: true,
				syntaxes: {
					'.js': '//'
				}
			},
			files: [{
				expand: true,
				src: ['dist/*.js'],
			}]
		}
	};

	Configuration.uglify = {
		options: {
			enclose: {
				'window': 'window',
				'window.document': 'document',
				'window.angular': 'angular'
			},
			mangle: {
				except: ['angular']
			}
		},
		dist: {
			src: [
				'lib/javascripts/core.js',
				'lib/javascripts/templates/core.js',
				'lib/javascripts/constants/imgCaseStates.js',
				'lib/javascripts/directives/fbImgValidator.js',
				'lib/javascripts/services/fileReader.js',
				'lib/javascripts/services/grid.js'
			],
			dest: 'dist/<%= package.name %>.<%= package.version %>.min.js'
		}
	};

	Configuration.concat = {
		dist: {
			src: [
				'lib/javascripts/core.js',
				'lib/javascripts/templates/core.js',
				'lib/javascripts/constants/imgCaseStates.js',
				'lib/javascripts/directives/fbImgValidator.js',
				'lib/javascripts/services/fileReader.js',
				'lib/javascripts/services/grid.js'
			],
			dest: 'dist/<%= package.name %>.<%= package.version %>.js'
		},
		css: {
			src: [
				'lib/styles/fbImgValidator.css'
			],
			dest: 'dist/<%= package.name %>.<%= package.version %>.css'
		}
	};

	Configuration.cssmin = {
		options: {
			shorthandCompacting: false,
			roundingPrecision: -1
		},
		dist: {
			files: {
				'dist/<%= package.name %>.<%= package.version %>.min.css': ['lib/styles/fbImgValidator.css']
			}
		}
	};

	Configuration.html2js = {
		options: {
			quoteChar: '\'',
			indentString: '\t',
			singleModule: true,
			target: 'js',
			module: 'fbPostImageValidator',
			base: __dirname + '/templates'
		},
		app: {
			src: [__dirname + '/lib/templates/**/*.jade'],
			dest: __dirname + '/lib/javascripts/templates/core.js'
		}
	};

	grunt.initConfig(Configuration);

	grunt.registerTask('es6', ['babel:all', 'add_comment:common']);
	grunt.registerTask('dev', ['babel:all', 'html2js']);
	grunt.registerTask('build', ['babel:all', 'html2js', 'uglify:dist', 'cssmin:dist', 'concat:dist', 'concat:css', 'add_comment:dist']);
}

module.exports = Grunt;

function getPathOption(grunt) {
	var pathOption = false;

	if (grunt.option('path')) {

		pathOption = {};
		pathOption.name = Path.normalize(grunt.option('path')).replace(paths.base, '').slice(1);
		pathOption.extension = Path.extname(grunt.option('path'));
	}

	return pathOption;
}